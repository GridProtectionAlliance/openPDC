@*******************************************************************************************************
//  DeviceStatus.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  12/19/2017 - William Ernest
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF
@using GSF.Data.Model
@using GSF.Web.Model
@using GSF.Web
@using GSF.Web.Shared
@using GSF.Web.Shared.Model
@using System.Data
@using System.Linq
@using System.Net.Http
@using GrafanaAdapters
@using openPDC.Model
@using Random = GSF.Security.Cryptography.Random
@inherits ExtendedTemplateBase<AppModel>
@* ReSharper disable Html.PathError *@
@* ReSharper disable SymbolFromNotCopiedLocallyReferenceUsedWarning *@
@{
    Layout = "Layout.cshtml";

    DataContext dataContext = ViewBag.DataContext;
    HttpRequestMessage request = ViewBag.Request;
    Dictionary<string, string> parameters = request.QueryParameters();
    AlarmDevice alarmDevice = null;
    int alarmDeviceID, deviceID = 0, parentID = 0;
    string idValue;
    string deviceGuid;
    string postError = null;
    ulong salt = Random.UInt64;

    // Passing in "ID" or "AlarmDeviceID" assumes initial lookup of AlarmDevice record
    if (!parameters.TryGetValue("ID", out idValue))
    {
        parameters.TryGetValue("AlarmDeviceID", out idValue);
    }

    if (string.IsNullOrWhiteSpace(idValue))
    {
        // Passing in "DeviceID" assumes initial lookup of Device record
        if (parameters.TryGetValue("DeviceID", out idValue))
        {
            int.TryParse(idValue, out deviceID);
        }
        else if (parameters.TryGetValue("UniqueID", out deviceGuid))
        {
            int.TryParse(dataContext.Connection.ExecuteScalar<string>("SELECT ID FROM Device WHERE UniqueID = '" + deviceGuid + "'"), out deviceID);
        }
    }
    else
    {
        if (int.TryParse(idValue, out alarmDeviceID))
        {
            alarmDevice = dataContext.Table<AlarmDevice>().QueryRecordWhere("ID = {0}", alarmDeviceID);
        }

        if ((object)alarmDevice != null)
        {
            deviceID = alarmDevice.DeviceID;
        }
    }

    string deviceAcronym = null, deviceName = null, vendorName = null, deviceType = null,
    contactList = null, connectionString = null, displayData = null, stateName = null,
    stateColor = null, parentAcronym = null, adapterAcronym = null, extraMessage = "";

    decimal longitude = 0.0M, latitude = 0.0M;
    int framesPerSecond = 30, refreshInterval = DeviceAlarmStateAdapter.DefaultMonitoringRate / 1000;
    bool reinitializeAlarmStateAdapter = false;
    bool targetParentDevices = false;

    DataRow alarmStateAdapter = dataContext.Connection.RetrieveRow("SELECT * FROM CustomActionAdapter WHERE TypeName='openPDC.Adapters.DeviceAlarmStateAdapter'");

    if ((object)alarmStateAdapter != null)
    {
        adapterAcronym = alarmStateAdapter["AdapterName"].ToString();
        string adapterSettings = alarmStateAdapter["ConnectionString"].ToString();

        if (!string.IsNullOrWhiteSpace(adapterSettings))
        {
            Dictionary<string, string> settings = adapterSettings.ParseKeyValuePairs();
            string setting;
            int monitoringRate;

            if (settings.TryGetValue("MonitoringRate", out setting) && int.TryParse(setting, out monitoringRate))
            {
                refreshInterval = monitoringRate / 1000;
            }

            if (settings.TryGetValue("TargetParentDevices", out setting))
            {
                targetParentDevices = setting.ParseBoolean();
            }
        }
    }

    Device device = dataContext.Table<Device>().QueryRecordWhere("ID = {0}", deviceID);

    if ((object)device != null)
    {
        if (ViewBag.IsPost)
        {
            try
            {
                PostData postData = request.GetPostData();
                device.Enabled = postData.FormData["deviceInService"].ParseBoolean();
                dataContext.Table<Device>().UpdateRecord(device);

                if ((object)alarmDevice == null)
                {
                    alarmDevice = dataContext.Table<AlarmDevice>().QueryRecordWhere("DeviceID = {0}", deviceID);
                }

                if ((object)alarmDevice != null)
                {
                    TableOperations<AlarmState> alarmStateTable = dataContext.Table<AlarmState>();
                    AlarmState[] alarmStateRecords = alarmStateTable.QueryRecords().ToArray();
                    AlarmState newState;

                    if (device.Enabled)
                    {
                        newState = alarmStateRecords.FirstOrDefault(alarmState => alarmState.State == "Not Available");
                        alarmDevice.DisplayData = "0";
                        extraMessage = "-- State Reset";
                    }
                    else
                    {
                        newState = alarmStateRecords.FirstOrDefault(alarmState => alarmState.State == "Out of Service");
                        alarmDevice.DisplayData = GetOutOfServiceTime(device);
                    }

                    if ((object)newState != null)
                    {
                        alarmDevice.StateID = newState.ID;
                    }

                    dataContext.Table<AlarmDevice>().UpdateRecord(alarmDevice);
                    reinitializeAlarmStateAdapter = true;
                }
            }
            catch (Exception ex)
            {
                postError = ex.Message;
            }
        }

        deviceAcronym = device.Acronym;
        deviceName = device.Name;
        contactList = device.ContactList;
        connectionString = device.ConnectionString;

        if (device.Longitude.HasValue)
        {
            longitude = device.Longitude.Value;
        }

        if (device.Latitude.HasValue)
        {
            latitude = device.Latitude.Value;
        }

        if (device.FramesPerSecond.HasValue)
        {
            framesPerSecond = device.FramesPerSecond.Value;
        }

        int? vendorDeviceID = device.VendorDeviceID;

        if (device.ParentID.HasValue)
        {
            parentID = device.ParentID.Value;

            // If this is a concentrator child, get connection string of parent
            Device parentDevice = dataContext.Table<Device>().QueryRecordWhere("ID = {0}", parentID);

            if ((object)parentDevice != null)
            {
                parentAcronym = parentDevice.Acronym;

                string childConnectionString = connectionString;

                // Settings in child connection string are not common
                if (string.IsNullOrWhiteSpace(childConnectionString))
                {
                    childConnectionString = "";
                }
                else
                {
                    childConnectionString = string.Format("; childDevice={0}; {1}", deviceAcronym, childConnectionString);
                }

                connectionString = string.Format("parentDevice={0}; {1}{2}", parentDevice.Acronym, parentDevice.ConnectionString, childConnectionString);
                vendorDeviceID = device.VendorDeviceID ?? parentDevice.VendorDeviceID;
            }
        }

        VendorDevice vendorDevice = dataContext.Table<VendorDevice>().QueryRecordWhere("ID = {0}", vendorDeviceID);

        if ((object)vendorDevice != null)
        {
            deviceType = vendorDevice.Name;

            Vendor vendor = dataContext.Table<Vendor>().QueryRecordWhere("ID = {0}", vendorDevice.VendorID);

            if ((object)vendor != null)
            {
                vendorName = vendor.Name;
            }
        }

        alarmDevice = dataContext.Table<AlarmDevice>().QueryRecordWhere("DeviceID = {0}", targetParentDevices && parentID > 0 ? parentID : device.ID);

        if ((object)alarmDevice != null)
        {
            displayData = alarmDevice.DisplayData;

            AlarmState alarmState = dataContext.Table<AlarmState>().QueryRecordWhere("ID = {0}", alarmDevice.StateID);

            if ((object)alarmState != null)
            {
                stateName = alarmState.State;
                stateColor = alarmState.Color;
            }
        }
    }

    if (string.IsNullOrWhiteSpace(deviceName))
    {
        deviceName = "UNDEFINED";
    }

    if (string.IsNullOrWhiteSpace(vendorName))
    {
        vendorName = "Unspecified";
    }

    if (string.IsNullOrWhiteSpace(deviceType))
    {
        deviceType = "Unspecified";
    }

    if (string.IsNullOrWhiteSpace(contactList))
    {
        contactList = "None Defined";
    }

    if (string.IsNullOrWhiteSpace(connectionString))
    {
        connectionString = "settings=none";
    }

    if (string.IsNullOrWhiteSpace(displayData))
    {
        displayData = "0";
    }

    if (string.IsNullOrWhiteSpace(stateName))
    {
        stateName = "Unknown State";
    }

    if (string.IsNullOrWhiteSpace(stateColor))
    {
        stateColor = "yellow";
    }

    if (string.IsNullOrEmpty(parentAcronym))
    {
        parentAcronym = "";
    }

    ViewBag.Title = deviceAcronym + " Device Status";
    ViewBag.HidePageTitle = true;
}
@functions {
    public static string GetOutOfServiceTime(Device device)
    {
        if ((object)device == null)
            return "U/A";

        try
        {
            return DeviceAlarmStateAdapter.GetShortElapsedTimeString(DateTime.UtcNow.Ticks - device.UpdatedOn.Ticks);
        }
        catch
        {
            return "U/A";
        }
    }
}
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }

        .btn-group {
            text-align: center;
        }

            .btn-group button {
                background-color: #4CAF50; /* Green background */
                border: 1px solid green; /* Green border */
                color: white; /* White text */
                cursor: pointer; /* Pointer/hand icon */
                float: none; /* Float the buttons side by side */
                margin: 5px;
                height: 62px;
            }

            /* Clear floats (clearfix hack) */
            .btn-group:after {
                content: "";
                clear: both;
                display: table;
            }

            .btn-group button:not(:last-child) {
                border-right: none; /* Prevent double borders */
            }

            /* Add a background color on hover */
            .btn-group button:hover {
                background-color: #3e8e41;
            }

            /* Add a background color on disabled */
            .btn-group button:disabled {
                background-color: grey;
                cursor: not-allowed;
                pointer-events: all !important;
            }

        .banner-well {
            width: 100%;
            height: 95px;
            border: 1px solid darkgrey;
            float: none;
            margin: 0;
            text-align: center;
            font-size: xx-large;
            color: white;
        }

        .largeul {
            font-size: large;
            list-style-type: none;
        }

        .center-with-padding {
            text-align: center;
            vertical-align: top;
            white-space: nowrap;
            padding-left: 5px;
            padding-right: 5px;
        }

        .center-with-padding-right {
            text-align: center;
            vertical-align: top;
            white-space: nowrap;
            padding-right: 5px;
        }
    </style>
}
<div id="titleBar" class="banner-well" style="background-color: @stateColor">
    @deviceName - <span id="stateName">@stateName</span> [<span id="displayData">@displayData</span>] <span id="extraMessage">@extraMessage</span><br />
    <span style="font-size: 65%">Refreshing in <span id="refreshCount">@refreshInterval</span> seconds...</span>
</div>
<div class="col-md-6" style="height:90%">
    <div style="height: 48%; overflow-y: scroll">
        <h3>Device Information</h3>
        <ul class="largeul">
            <li>Device Acronym: @deviceAcronym</li>
            <li>Device Name: @deviceName</li>
            <li>Make: @vendorName</li>
            <li>Model: @deviceType</li>
            <li>Latitude: @latitude</li>
            <li>Longitude: @longitude</li>
            <li>Frames per Second: @framesPerSecond</li>
            <li>Contacts: @contactList</li>
            <li>
                Connection String:
                <ul>
                    @foreach (string value in connectionString.Split(';')) {
                        <li>@value</li>
                    }
                </ul>
            </li>
        </ul>
    </div>
    <div class="table-responsive" style="height:48%; overflow-y: scroll">
        <table id="statTable" class="table table-condensed table-hover table-striped" style="font-size: x-small;">
            <thead>
                <tr><th colspan="3" style="text-align: left; text-wrap: none">Run-time&nbsp;Statistics:</th></tr>
                <tr><th class="center-with-padding-right">ID</th><th>Description</th><th class="center-with-padding">Value</th><th>Time (UTC)</th></tr>
            </thead>
            <tbody>
                <tr style="visibility: hidden">
                    <td colspan="3"></td> @* Needed so that boot-strap applies table properties *@
                </tr>
            </tbody>
        </table>
        <div id="loadingDataLabel">
            Loading&nbsp;statistics&nbsp;&nbsp;<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>
        </div>
    </div>
</div>
<div class="col-md-6" style="text-align:center; height: 90%">
    <div style="height: 50%; width: 100%" id="graphwrapper">
        <div style="height: 100%; width: 100%; display: table">
            <div style="vertical-align: middle; display: table-cell">Attempting connection&nbsp;&nbsp;<span class='glyphicon glyphicon-refresh glyphicon-spin'></span></div>
        </div>
    </div>
    <form role="form" method="post" action="@request.RequestUri.AbsolutePath?DeviceID=@deviceID&Salt=@salt" enctype="multipart/form-data">
        <div class="btn-group" style="width: 100%">            
            @if (targetParentDevices) {
                <button type="submit" name="deviceInService" style="width: 30%" value="true">Reset to In-Service</button>
                <button type="submit" name="deviceInService" style="width: 30%" value="false">Set to Out-of-Service</button>
                <button type="button" style="width: 30%" onclick="Reconnect()">Reconnect Device</button>
                <button type="button" style="width: 30%" onclick="PingDevice()">Ping</button>
                <button id="setAcknowledge" type="button" style="width: 30%" onclick="SetAcknowledge('@deviceAcronym')" disabled>Acknowledge</button>
                <button id="resetAcknowledge" type="button" style="width: 30%" onclick="ResetAcknowledge('@deviceAcronym')" disabled>Reset Acknowledge</button>
            }
            else {
                <button type="button" style="width: 30%" onclick="Reconnect()">Reconnect Device</button>
                <button type="button" style="width: 30%" onclick="PingDevice()">Ping</button>
            }
            @Html.RequestVerificationToken()
        </div>
    </form>
</div>
@section Scripts {
    <script src="@Resources.Root/Shared/Scripts/jquery.subscriber.js"></script>
    <script src="@Resources.Root/Shared/Scripts/flot/jquery.flot.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/flot/jquery.flot.crosshair.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/flot/jquery.flot.navigate.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/flot/jquery.flot.resize.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/flot/jquery.flot.selection.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/flot/jquery.flot.time.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/flot/jquery.flot.axislabels.min.js"></script>
    <script src="@Resources.Root/Shared/Scripts/moment.js"></script>
    <script>
    var refreshInterval = @refreshInterval;
    var refreshCountdown = refreshInterval;
    const deviceID = @(targetParentDevices && parentID > 0 ? parentID : deviceID);
    const deviceAcronym = "@deviceAcronym";
    const parentAcronym = "@(string.IsNullOrWhiteSpace(parentAcronym) ? deviceAcronym : parentAcronym)";
@{if (reinitializeAlarmStateAdapter) {
    <text>
    $(window).on("hubConnected", function () {
        serviceHub.sendCommand("initialize @(string.IsNullOrWhiteSpace(parentAcronym) ? deviceAcronym : parentAcronym)").done(function () {
            serviceHub.sendCommand("invoke @adapterAcronym UpdateAlarmStates").done(function () {
                refreshCountdown = @refreshInterval + 10;
            });
        });
    });
    </text>
}}
    function updateCountdown() {
        refreshCountdown--;

        if (refreshCountdown === 0) {
            dataHub.getAlarmState(deviceID)
                .fail(showErrorMessage)
                .done(function (alarmState) {
                    const defaults = {
                        displayData: "0",
                        stateName: "Unknown State",
                        stateColor: "yellow"
                    };

                    alarmState = $.extend(defaults, alarmState);
                    $("#displayData").text(alarmState.displayData);
                    $("#stateName").text(alarmState.stateName);
                    $("#extraMessage").text("");
                    $("#titleBar").css("background-color", alarmState.stateColor);
                    $('#titleBar').css('color', invertColor(alarmState.stateColor));

                    $('#setAcknowledge').prop("disabled", (alarmState.stateName === 'Good' || alarmState.stateName === 'Acknowledged'));
                    $('#resetAcknowledge').prop("disabled", (alarmState.stateName !== 'Acknowledged'));

                    refreshCountdown = refreshInterval;
                    $('#refreshCount').text(refreshCountdown);
                    setTimeout(updateCountdown, 1000);
                });
        }
        else {
            $('#refreshCount').text(refreshCountdown);
            setTimeout(updateCountdown, 1000);
        }
    }

    $(function () {
        const postError = "@postError";

        if (!isEmpty(postError))
            showErrorMessage(postError);

        $('#bodyContainer').removeClass('container');
        setHeights();

        $(window).on('resize', setHeights());

        $(window).on("hubConnected", function () {
            var dataSubscriber = $.subscriber();
            var statSubscriber = $.subscriber();

            dataSubscriber.connectionEstablished = function () {
                const filterExpression = "FILTER ActiveMeasurements WHERE Device = '" + deviceAcronym + "' AND SignalType = 'FREQ'";

                if (isIE)
                    dataSubscriber.subscribe({ FilterExpression: filterExpression, Throttled: true, PublishInterval: 0.25 });
                else
                    dataSubscriber.subscribe({ FilterExpression: filterExpression });
            };

            dataSubscriber.newMeasurements = function (measurements) {
                buildPlot(measurements);
            };

            dataSubscriber.processException = function (exception) {
                showErrorMessage("Data subscription: " + exception.Message);
            };

            statSubscriber.connectionEstablished = function () {
                statSubscriber.sendCommand("MetaDataRefresh");
            };

            statSubscriber.metadataReceived = function () {
                statSubscriber.getMetadata("MeasurementDetail", "DeviceAcronym IN ('" + deviceAcronym + "', '" + parentAcronym + "') AND SignalAcronym = 'STAT'")
                    .fail(showErrorMessage)
                    .done(function (metadata) {
                        function category(metadataRecord) {
                            const matches = metadataRecord.signalreference.match(/!([^-]+)-ST[0-9]+$/);

                            if (matches === null)
                                return null;

                            return matches[1];
                        }

                        function signalIndex(metadataRecord) {
                            const matches = metadataRecord.signalreference.match(/[0-9]+$/);

                            if (matches === null)
                                return null;

                            return Number(matches[0]);
                        }

                        metadata.sort(function (mr1, mr2) {
                            const comparisons = [];
                            comparisons.push({ m1: category(mr1), m2: category(mr2) });
                            comparisons.push({ m1: signalIndex(mr1), m2: signalIndex(mr2) });

                            for (let i = 0; i < comparisons.length; i++) {
                                const comparison = comparisons[i];

                                if (comparison.m1 < comparison.m2)
                                    return -1;

                                if (comparison.m1 > comparison.m2)
                                    return 1;
                            }

                            return 0;
                        });

                        $("#statTable tbody > tr").remove();

                        $.each(metadata, function (_, metadataRecord) {
                            $("#statTable").append("<tr><td class=\"center-with-padding-right\">" + category(metadataRecord) + "-ST" + signalIndex(metadataRecord) + "</td><td>" + metadataRecord.description + "</td><td class=\"center-with-padding\" id=\"" + metadataRecord.signalid + "Val\"></td><td id=\"" + metadataRecord.signalid + "Time\"></td></tr>");
                        });

                        sharedHub.getStatisticFormatRecords(metadata)
                            .fail(showErrorMessage)
                            .done(function (formatRecords) {
                                statSubscriber.subscribe({ FilterExpression: "FILTER ActiveMeasurements WHERE Device IN ('" + deviceAcronym + "', '" + parentAcronym + "') AND SignalType = 'STAT'", FormatRecords: formatRecords });
                            });

                        $("#loadingDataLabel").hide();
                    });
            };

            statSubscriber.newMeasurements = function (measurements) {
                $.each(measurements, function (_, measurement) {
                    const time = moment(measurement.timestamp).utc().format("HH:mm:ss.SSS");
                    $('#' + measurement.signalid + 'Val').text(measurement.value);
                    $('#' + measurement.signalid + 'Time').text(time);
                });
            };

            statSubscriber.processException = function (exception) {
                showErrorMessage("Stat subscription: " + exception.Message);
            };

            dataSubscriber.connect();
            statSubscriber.connect();

            $('button').removeAttr('disabled');
            $('#setAcknowledge').prop("disabled", true);
            $('#resetAcknowledge').prop("disabled", true);

            dataHub.getAlarmState(deviceID).done(function (alarmState) {
                $('#setAcknowledge').prop("disabled", (alarmState.stateName === 'Good' || alarmState.stateName === 'Acknowledged'));
                $('#resetAcknowledge').prop("disabled", (alarmState.stateName !== 'Acknowledged'));
            });
        });

        // Set inverse foreground color for readability
        $('#titleBar').css('color', invertColor('@stateColor'));

        setTimeout(updateCountdown, 1000);
    });

    function Reconnect() {
        @{if (!string.IsNullOrWhiteSpace(adapterAcronym)) {
            <text>
                serviceHub.sendCommand("initialize @(string.IsNullOrWhiteSpace(parentAcronym) ? deviceAcronym : parentAcronym)").done(function () {
                    serviceHub.sendCommand("initialize @adapterAcronym").done(function () {
                        window.location = window.location.href;
                    });
                });
            </text>
        }
        else {
            <text>
                serviceHub.sendCommand("initialize @(string.IsNullOrWhiteSpace(parentAcronym) ? deviceAcronym : parentAcronym)").done(function() {
                    window.location = window.location.href;
                });
            </text>
        }}
    }

    // sets heights of various objects
    function setHeights() {
        $('#bodyContainer').css('height', calculateRemainingBodyHeight);
    }

    var plotData = [[]];

    function buildPlot(data) {

        $.each(data, function (_, d) {
            plotData[0].push([d.timestamp, d.value]);
        });

        plotData[0].splice(0, plotData[0].length - 30);

        $('#graphwrapper').children().remove();

        $.plot("#graphwrapper", plotData, {
            yaxis: {
                show: true,
                position: "right",
                axisLabel: "Frequency"
            },
            xaxis: {
                ticks: 5,
                tickFormatter: function(val, axis){
                    return moment(val).utc().format('HH:mm:ss.SSSS');
                },
                axisLabel: "Time (UTC)"
            }
        });
    }

    // https://bl.ocks.org/njvack/02ad8efcb0d552b0230d
    color_convert = function () {
      var pub = {};
      const canvas = document.createElement('canvas');
      canvas.height = 1;
      canvas.width = 1;
      var context = canvas.getContext('2d');

      function byte_to_hex(byte) {
        // Turns a number (0-255) into a 2-character hex number (00-ff)
        return ('0'+byte.toString(16)).slice(-2);
      }

      pub.to_rgba_array = function(color) {
        /**
         * Turns any valid canvas fillStyle into a 4-element Uint8ClampedArray with bytes
         * for R, G, B, and A. Invalid styles will return [0, 0, 0, 0]. Examples:
         * color_convert.to_rgb_array('red')  # [255, 0, 0, 255]
         * color_convert.to_rgb_array('#ff0000')  # [255, 0, 0, 255]
         * color_convert.to_rgb_array('garbagey')  # [0, 0, 0, 0]
         */
        // Setting an invalid fillStyle leaves this unchanged
        context.fillStyle = 'rgba(0, 0, 0, 0)';
        // We're reusing the canvas, so fill it with something predictable
        context.clearRect(0, 0, 1, 1);
        context.fillStyle = color;
        context.fillRect(0, 0, 1, 1);
        return context.getImageData(0, 0, 1, 1).data;
      }

      pub.to_rgba = function(color) {
        /**
         * Turns any valid canvas fill style into an rgba() string. Returns
         * 'rgba(0,0,0,0)' for invalid colors. Examples:
         * color_convert.to_rgba('red')  # 'rgba(255,0,0,1)'
         * color_convert.to_rgba('#f00')  # 'rgba(255,0,0,1)'
         * color_convert.to_rgba('garbagey')  # 'rgba(0,0,0,0)'
         * color_convert.to_rgba(some_pattern)  # Depends on the pattern
         *
         * @@param color  A string, pattern, or gradient
         * @@return  A valid rgba CSS color string
         */
          const a = pub.to_rgba_array(color);
          return 'rgba('+a[0]+','+a[1]+','+a[2]+','+(a[3]/255)+')';
      }

      pub.to_hex = function(color) {
        /**
         * Turns any valid canvas fill style into a hex triple. Returns
         * '#000000' for invalid colors. Examples:
         * color_convert.to_hex('red')  # '#ff0000'
         * color_convert.to_hex('rgba(255,0,0,1)')  # '#ff0000'
         * color_convert.to_hex('garbagey')  # '#000000'
         * color_convert.to_hex(some_pattern)  # Depends on the pattern
         *
         * @@param color  A string, pattern, or gradient
         * @@return  A valid rgba CSS color string
         */
        var a = pub.to_rgba_array(color);
        // Sigh, you can't map() typed arrays
        const hex = [0,1,2].map(function(i) { return byte_to_hex(a[i]) }).join('');
        return '#'+hex;
      }

      return pub;
    }();

    function invertColor(color) {
        color = color_convert.to_hex(color);

        // if only first half of color is defined, repeat it
        if(color.length < 5) {
            color += color.slice(1);
        }

        return (color.replace('#', '0x')) > (0xffffff / 2) ? '#333' : '#fff';
    }

    function PingDevice() {
        window.open('/RemoteConsole.cshtml?Filter=Filter+-Exclude+Regex+""&Command=Ping+' + parentAcronym);
    }

    function SetAcknowledge(deviceAcronym) {
        dataHub.setAcknowledge(deviceAcronym).done(function () {
            location.reload(true);
        });
    }

    function ResetAcknowledge(deviceAcronym) {
        dataHub.resetAcknowledge(deviceAcronym).done(function () {
            location.reload(true);
        });
    }

    </script>
}